src\input_output\FGOutputType.cpp:  PropertyManager->Tie(outputProp + "/log_rate_hz", this, &FGOutputType::GetRateHz, &FGOutputType::SetRateHz, false);
src\input_output\FGOutputType.cpp:  PropertyManager->Tie(outputProp + "/enabled", &enabled);
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vc-kts", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/ve-kts", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vg-kts", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vt-kts", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/mach", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/roc-fpm", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/gamma-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/alpha-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/beta-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/theta-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/phi-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/psi-true-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/lat-gc-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/long-gc-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/h-sl-ft", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/h-agl-ft", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/terrain-elevation-ft", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vg-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vt-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vw-bx-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vw-by-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vw-bz-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vw-north-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vw-east-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vw-down-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vw-mag-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vw-dir-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/roc-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/u-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/v-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/w-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vn-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/ve-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/vd-fps", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/gamma-rad", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/alpha-rad", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/theta-rad", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/beta-rad", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/phi-rad", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/psi-true-rad", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/lat-gc-rad", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/long-gc-rad", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/p-rad_sec", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/q-rad_sec", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/r-rad_sec", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/lat-geod-rad", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/lat-geod-deg", this,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/geod-alt-ft", &position,
src\initialization\FGInitialCondition.cpp:  PropertyManager->Tie("ic/targetNlf", this,
src\models\atmosphere\FGStandardAtmosphere.cpp:  PropertyManager->Tie("atmosphere/delta-T", this, eRankine,
src\models\atmosphere\FGStandardAtmosphere.cpp:  PropertyManager->Tie("atmosphere/SL-graded-delta-T", this, eRankine,
src\models\atmosphere\FGStandardAtmosphere.cpp:  PropertyManager->Tie("atmosphere/P-sl-psf", this, ePSF,
src\models\atmosphere\FGStandardAtmosphere.cpp:  PropertyManager->Tie("atmosphere/dew-point-R", this, eRankine,
src\models\atmosphere\FGStandardAtmosphere.cpp:  PropertyManager->Tie("atmosphere/vapor-pressure-psf", this, ePSF,
src\models\atmosphere\FGStandardAtmosphere.cpp:  PropertyManager->Tie("atmosphere/saturated-vapor-pressure-psf", this, ePSF,
src\models\atmosphere\FGStandardAtmosphere.cpp:  PropertyManager->Tie("atmosphere/RH", this,
src\models\atmosphere\FGStandardAtmosphere.cpp:  PropertyManager->Tie("atmosphere/vapor-fraction-ppm", this,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/psiw-rad", this, &FGWinds::GetWindPsi, &FGWinds::SetWindPsi);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/wind-north-fps", this, eNorth, (PMF)&FGWinds::GetWindNED,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/wind-east-fps",  this, eEast, (PMF)&FGWinds::GetWindNED,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/wind-down-fps",  this, eDown, (PMF)&FGWinds::GetWindNED,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/wind-mag-fps", this, &FGWinds::GetWindspeed,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/gust-north-fps", this, eNorth, (PMF)&FGWinds::GetGustNED,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/gust-east-fps",  this, eEast, (PMF)&FGWinds::GetGustNED,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/gust-down-fps",  this, eDown, (PMF)&FGWinds::GetGustNED,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/cosine-gust/startup-duration-sec", this, (Ptr)0L, &FGWinds::StartupGustDuration);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/cosine-gust/steady-duration-sec", this, (Ptr)0L, &FGWinds::SteadyGustDuration);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/cosine-gust/end-duration-sec", this, (Ptr)0L, &FGWinds::EndGustDuration);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/cosine-gust/magnitude-ft_sec", this, (Ptr)0L, &FGWinds::GustMagnitude);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/cosine-gust/frame", this, (PMFt)0L, (PMFi)&FGWinds::GustFrame);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/cosine-gust/X-velocity-ft_sec", this, (Ptr)0L, &FGWinds::GustXComponent);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/cosine-gust/Y-velocity-ft_sec", this, (Ptr)0L, &FGWinds::GustYComponent);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/cosine-gust/Z-velocity-ft_sec", this, (Ptr)0L, &FGWinds::GustZComponent);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/cosine-gust/start", this, static_cast<bool (FGWinds::*)(void) const>(nullptr), &FGWinds::StartGust);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/updownburst/number-of-cells", this, (PMFt)0L, &FGWinds::NumberOfUpDownburstCells);
src\models\atmosphere\FGWinds.cpp://  PropertyManager->Tie("atmosphere/updownburst/", this, (Ptr)0L, &FGWinds::);
src\models\atmosphere\FGWinds.cpp://  PropertyManager->Tie("atmosphere/updownburst/", this, (Ptr)0L, &FGWinds::);
src\models\atmosphere\FGWinds.cpp://  PropertyManager->Tie("atmosphere/updownburst/", this, (Ptr)0L, &FGWinds::);
src\models\atmosphere\FGWinds.cpp://  PropertyManager->Tie("atmosphere/updownburst/", this, (Ptr)0L, &FGWinds::);
src\models\atmosphere\FGWinds.cpp://  PropertyManager->Tie("atmosphere/updownburst/", this, (Ptr)0L, &FGWinds::);
src\models\atmosphere\FGWinds.cpp://  PropertyManager->Tie("atmosphere/updownburst/", this, (Ptr)0L, &FGWinds::);
src\models\atmosphere\FGWinds.cpp://  PropertyManager->Tie("atmosphere/updownburst/", this, (Ptr)0L, &FGWinds::);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/turb-north-fps", this, eNorth, (PMF)&FGWinds::GetTurbNED,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/turb-east-fps",  this, eEast, (PMF)&FGWinds::GetTurbNED,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/turb-down-fps",  this, eDown, (PMF)&FGWinds::GetTurbNED,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/p-turb-rad_sec", this,1, (PMF)&FGWinds::GetTurbPQR);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/q-turb-rad_sec", this,2, (PMF)&FGWinds::GetTurbPQR);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/r-turb-rad_sec", this,3, (PMF)&FGWinds::GetTurbPQR);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/turb-type", this, (PMFt)&FGWinds::GetTurbType, (PMFi)&FGWinds::SetTurbType);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/turb-rate", this, &FGWinds::GetTurbRate, &FGWinds::SetTurbRate);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/turb-gain", this, &FGWinds::GetTurbGain, &FGWinds::SetTurbGain);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/turb-rhythmicity", this, &FGWinds::GetRhythmicity,
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/turbulence/milspec/windspeed_at_20ft_AGL-fps",
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/turbulence/milspec/severity",
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/total-wind-north-fps", this, eNorth, (PMF)&FGWinds::GetTotalWindNED);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/total-wind-east-fps",  this, eEast,  (PMF)&FGWinds::GetTotalWindNED);
src\models\atmosphere\FGWinds.cpp:  PropertyManager->Tie("atmosphere/total-wind-down-fps",  this, eDown,  (PMF)&FGWinds::GetTotalWindNED);
src\models\FGExternalForce.cpp:  PropertyManager->Tie( BasePropertyName + "/location-x-in", (FGForce*)this,
src\models\FGExternalForce.cpp:  PropertyManager->Tie( BasePropertyName + "/location-y-in", (FGForce*)this,
src\models\FGExternalForce.cpp:  PropertyManager->Tie( BasePropertyName + "/location-z-in", (FGForce*)this,
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/aileron-cmd-norm", this, &FGFCS::GetDaCmd, &FGFCS::SetDaCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/elevator-cmd-norm", this, &FGFCS::GetDeCmd, &FGFCS::SetDeCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/rudder-cmd-norm", this, &FGFCS::GetDrCmd, &FGFCS::SetDrCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/flap-cmd-norm", this, &FGFCS::GetDfCmd, &FGFCS::SetDfCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/speedbrake-cmd-norm", this, &FGFCS::GetDsbCmd, &FGFCS::SetDsbCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/spoiler-cmd-norm", this, &FGFCS::GetDspCmd, &FGFCS::SetDspCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/pitch-trim-cmd-norm", this, &FGFCS::GetPitchTrimCmd, &FGFCS::SetPitchTrimCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/roll-trim-cmd-norm", this, &FGFCS::GetRollTrimCmd, &FGFCS::SetRollTrimCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/yaw-trim-cmd-norm", this, &FGFCS::GetYawTrimCmd, &FGFCS::SetYawTrimCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/left-aileron-pos-rad", this, ofRad, &FGFCS::GetDaLPos, &FGFCS::SetDaLPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/left-aileron-pos-deg", this, ofDeg, &FGFCS::GetDaLPos, &FGFCS::SetDaLPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/left-aileron-pos-norm", this, ofNorm, &FGFCS::GetDaLPos, &FGFCS::SetDaLPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/mag-left-aileron-pos-rad", this, ofMag, &FGFCS::GetDaLPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/right-aileron-pos-rad", this, ofRad, &FGFCS::GetDaRPos, &FGFCS::SetDaRPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/right-aileron-pos-deg", this, ofDeg, &FGFCS::GetDaRPos, &FGFCS::SetDaRPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/right-aileron-pos-norm", this, ofNorm, &FGFCS::GetDaRPos, &FGFCS::SetDaRPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/mag-right-aileron-pos-rad", this, ofMag, &FGFCS::GetDaRPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/elevator-pos-rad", this, ofRad, &FGFCS::GetDePos, &FGFCS::SetDePos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/elevator-pos-deg", this, ofDeg, &FGFCS::GetDePos, &FGFCS::SetDePos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/elevator-pos-norm", this, ofNorm, &FGFCS::GetDePos, &FGFCS::SetDePos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/mag-elevator-pos-rad", this, ofMag, &FGFCS::GetDePos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/rudder-pos-rad", this,ofRad, &FGFCS::GetDrPos, &FGFCS::SetDrPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/rudder-pos-deg", this,ofDeg, &FGFCS::GetDrPos, &FGFCS::SetDrPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/rudder-pos-norm", this,ofNorm, &FGFCS::GetDrPos, &FGFCS::SetDrPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/mag-rudder-pos-rad", this,ofMag, &FGFCS::GetDrPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/flap-pos-rad", this,ofRad, &FGFCS::GetDfPos, &FGFCS::SetDfPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/flap-pos-deg", this,ofDeg, &FGFCS::GetDfPos, &FGFCS::SetDfPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/flap-pos-norm", this,ofNorm, &FGFCS::GetDfPos, &FGFCS::SetDfPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/speedbrake-pos-rad", this,ofRad, &FGFCS::GetDsbPos, &FGFCS::SetDsbPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/speedbrake-pos-deg", this,ofDeg, &FGFCS::GetDsbPos, &FGFCS::SetDsbPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/speedbrake-pos-norm", this,ofNorm, &FGFCS::GetDsbPos, &FGFCS::SetDsbPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/mag-speedbrake-pos-rad", this,ofMag, &FGFCS::GetDsbPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/spoiler-pos-rad", this, ofRad, &FGFCS::GetDspPos, &FGFCS::SetDspPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/spoiler-pos-deg", this, ofDeg, &FGFCS::GetDspPos, &FGFCS::SetDspPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/spoiler-pos-norm", this, ofNorm, &FGFCS::GetDspPos, &FGFCS::SetDspPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/mag-spoiler-pos-rad", this, ofMag, &FGFCS::GetDspPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("gear/gear-pos-norm", this, &FGFCS::GetGearPos, &FGFCS::SetGearPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("gear/gear-cmd-norm", this, &FGFCS::GetGearCmd, &FGFCS::SetGearCmd);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/left-brake-cmd-norm", this, &FGFCS::GetLBrake, &FGFCS::SetLBrake);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/right-brake-cmd-norm", this, &FGFCS::GetRBrake, &FGFCS::SetRBrake);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/center-brake-cmd-norm", this, &FGFCS::GetCBrake, &FGFCS::SetCBrake);
src\models\FGFCS.cpp:  PropertyManager->Tie("gear/tailhook-pos-norm", this, &FGFCS::GetTailhookPos, &FGFCS::SetTailhookPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("fcs/wing-fold-pos-norm", this, &FGFCS::GetWingFoldPos, &FGFCS::SetWingFoldPos);
src\models\FGFCS.cpp:  PropertyManager->Tie("simulation/channel-dt", this, &FGFCS::GetChannelDeltaT);
src\models\FGFCS.cpp:  PropertyManager->Tie( tmp.c_str(), this, num, &FGFCS::GetThrottleCmd,
src\models\FGFCS.cpp:  PropertyManager->Tie( tmp.c_str(), this, num, &FGFCS::GetThrottlePos,
src\models\FGFCS.cpp:  PropertyManager->Tie( tmp.c_str(), this, num, &FGFCS::GetMixtureCmd,
src\models\FGFCS.cpp:  PropertyManager->Tie( tmp.c_str(), this, num, &FGFCS::GetMixturePos,
src\models\FGFCS.cpp:  PropertyManager->Tie( tmp.c_str(), this, num, &FGFCS::GetPropAdvanceCmd,
src\models\FGFCS.cpp:  PropertyManager->Tie( tmp.c_str(), this, num, &FGFCS::GetPropAdvance,
src\models\FGFCS.cpp:  PropertyManager->Tie( tmp.c_str(), this, num, &FGFCS::GetFeatherCmd,
src\models\FGFCS.cpp:  PropertyManager->Tie( tmp.c_str(), this, num, &FGFCS::GetPropFeather,
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name.c_str(), &MaxVolume, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name.c_str(), &Temperature, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name.c_str(), &Pressure, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name.c_str(), &Volume, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name.c_str(), &Buoyancy, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name.c_str(), &Contents, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name.c_str(), &ValveOpen, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name, &MaxVolume, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name, &Temperature, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name, &Pressure, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name, &Volume, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name, &Contents, false );
src\models\FGGasCell.cpp:  PropertyManager->Tie( property_name, &ValveOpen, false );
src\models\FGGroundReactions.cpp:  PropertyManager->Tie("gear/num-units", this, &FGGroundReactions::GetNumGearUnits);
src\models\FGGroundReactions.cpp:  PropertyManager->Tie("gear/wow", this, &FGGroundReactions::GetWOW);
src\models\FGGroundReactions.cpp:  PropertyManager->Tie("fcs/steer-cmd-norm", this, &FGGroundReactions::GetDsCmd,
src\math\FGTable.cpp:    PropertyManager->Tie( tmp, this, (PMF)&FGTable::GetValue);
src\models\FGInertial.cpp:  PropertyManager->Tie("inertial/sea-level-radius_ft", &in.Position,
src\models\FGInertial.cpp:  PropertyManager->Tie("simulation/gravity-model", this, &FGInertial::GetGravityType,
src\models\FGLGear.cpp:  PropertyManager->Tie( property_name.c_str(), &WOW );
src\models\FGLGear.cpp:  PropertyManager->Tie( property_name.c_str(), (FGForce*)this,
src\models\FGLGear.cpp:  PropertyManager->Tie( property_name.c_str(), (FGForce*)this,
src\models\FGLGear.cpp:  PropertyManager->Tie( property_name.c_str(), (FGForce*)this,
src\models\FGLGear.cpp:  PropertyManager->Tie( property_name.c_str(), &compressLength );
src\models\FGLGear.cpp:  PropertyManager->Tie( property_name.c_str(), &compressSpeed );
src\models\FGLGear.cpp:  PropertyManager->Tie( property_name.c_str(), (FGLGear*)this,
src\models\FGLGear.cpp:  PropertyManager->Tie( property_name.c_str(), &dynamicFCoeff );
src\models\FGLGear.cpp:    PropertyManager->Tie( property_name.c_str(), &WheelSlip );
src\models\FGLGear.cpp:    PropertyManager->Tie( property_name.c_str(), (FGLGear*)this,
src\models\FGLGear.cpp:    PropertyManager->Tie( property_name.c_str(), &FCoeff );
src\models\FGLGear.cpp:    PropertyManager->Tie( property_name.c_str(), &rollingFCoeff );
src\models\FGLGear.cpp:      PropertyManager->Tie( property_name.c_str(), this, &FGLGear::GetSteerAngleDeg );
src\models\FGLGear.cpp:      PropertyManager->Tie( property_name.c_str(), &Castered);
src\models\FGLGear.cpp:    PropertyManager->Tie( property_name.c_str(), &GearPos );
src\models\FGLGear.cpp:    PropertyManager->Tie(tmp.c_str(), this, &FGLGear::GetSteerAngleDeg, &FGLGear::SetSteerAngleDeg);
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/mass-slugs", this,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/weight-lbs", this,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/empty-weight-lbs", this,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/cg-x-in", this,1,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/cg-y-in", this,2,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/cg-z-in", this,3,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/ixx-slugs_ft2", this,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/iyy-slugs_ft2", this,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/izz-slugs_ft2", this,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/ixy-slugs_ft2", this,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/ixz-slugs_ft2", this,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/iyz-slugs_ft2", this,
src\models\FGMassBalance.cpp:  PropertyManager->Tie("inertia/print-mass-properties", this, (iOPV)0,
src\models\FGMassBalance.cpp:  PropertyManager->Tie( tmp.c_str(), this, &PointMass::GetPointMassWeight,
src\models\FGMassBalance.cpp:  PropertyManager->Tie( tmp.c_str(), this, eX, &PointMass::GetPointMassLocation,
src\models\FGMassBalance.cpp:  PropertyManager->Tie( tmp.c_str(), this, eY, &PointMass::GetPointMassLocation,
src\models\FGMassBalance.cpp:  PropertyManager->Tie( tmp.c_str(), this, eZ, &PointMass::GetPointMassLocation,
src\models\FGExternalReactions.cpp:  PropertyManager->Tie("moments/l-external-lbsft", this, eL, (PMF)&FGExternalReactions::GetMoments);
src\models\FGExternalReactions.cpp:  PropertyManager->Tie("moments/m-external-lbsft", this, eM, (PMF)&FGExternalReactions::GetMoments);
src\models\FGExternalReactions.cpp:  PropertyManager->Tie("moments/n-external-lbsft", this, eN, (PMF)&FGExternalReactions::GetMoments);
src\models\FGExternalReactions.cpp:  PropertyManager->Tie("forces/fbx-external-lbs", this, eX, (PMF)&FGExternalReactions::GetForces);
src\models\FGExternalReactions.cpp:  PropertyManager->Tie("forces/fby-external-lbs", this, eY, (PMF)&FGExternalReactions::GetForces);
src\models\FGExternalReactions.cpp:  PropertyManager->Tie("forces/fbz-external-lbs", this, eZ, (PMF)&FGExternalReactions::GetForces);
src\models\FGOutput.cpp:  PropertyManager->Tie("simulation/force-output", this, (iOPV)0, &FGOutput::ForceOutput, false);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/h-dot-fps", this, &FGPropagate::Gethdot);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/v-north-fps", this, eNorth, (PMF)&FGPropagate::GetVel);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/v-east-fps", this, eEast, (PMF)&FGPropagate::GetVel);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/v-down-fps", this, eDown, (PMF)&FGPropagate::GetVel);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/u-fps", this, eU, (PMF)&FGPropagate::GetUVW);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/v-fps", this, eV, (PMF)&FGPropagate::GetUVW);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/w-fps", this, eW, (PMF)&FGPropagate::GetUVW);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/p-rad_sec", this, eP, (PMF)&FGPropagate::GetPQR);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/q-rad_sec", this, eQ, (PMF)&FGPropagate::GetPQR);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/r-rad_sec", this, eR, (PMF)&FGPropagate::GetPQR);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/pi-rad_sec", this, eP, (PMF)&FGPropagate::GetPQRi);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/qi-rad_sec", this, eQ, (PMF)&FGPropagate::GetPQRi);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/ri-rad_sec", this, eR, (PMF)&FGPropagate::GetPQRi);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/eci-x-fps", this, eX, (PMF)&FGPropagate::GetInertialVelocity);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/eci-y-fps", this, eY, (PMF)&FGPropagate::GetInertialVelocity);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/eci-z-fps", this, eZ, (PMF)&FGPropagate::GetInertialVelocity);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/eci-velocity-mag-fps", this, &FGPropagate::GetInertialVelocityMagnitude);
src\models\FGPropagate.cpp:  PropertyManager->Tie("velocities/ned-velocity-mag-fps", this, &FGPropagate::GetNEDVelocityMagnitude);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/h-sl-ft", this, &FGPropagate::GetAltitudeASL, &FGPropagate::SetAltitudeASL, false);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/h-sl-meters", this, &FGPropagate::GetAltitudeASLmeters, &FGPropagate::SetAltitudeASLmeters, false);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/lat-gc-rad", this, &FGPropagate::GetLatitude, &FGPropagate::SetLatitude, false);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/long-gc-rad", this, &FGPropagate::GetLongitude, &FGPropagate::SetLongitude, false);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/lat-gc-deg", this, &FGPropagate::GetLatitudeDeg, &FGPropagate::SetLatitudeDeg, false);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/long-gc-deg", this, &FGPropagate::GetLongitudeDeg, &FGPropagate::SetLongitudeDeg, false);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/lat-geod-rad", this, &FGPropagate::GetGeodLatitudeRad);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/lat-geod-deg", this, &FGPropagate::GetGeodLatitudeDeg);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/geod-alt-ft", this, &FGPropagate::GetGeodeticAltitude);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/h-agl-ft", this,  &FGPropagate::GetDistanceAGL, &FGPropagate::SetDistanceAGL, false);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/geod-alt-km", this, &FGPropagate::GetGeodeticAltitudeKm);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/h-agl-km", this,  &FGPropagate::GetDistanceAGLKm, &FGPropagate::SetDistanceAGLKm, false);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/radius-to-vehicle-ft", this, &FGPropagate::GetRadius);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/terrain-elevation-asl-ft", this,
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/eci-x-ft", this, eX, (PMF)&FGPropagate::GetInertialPosition);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/eci-y-ft", this, eY, (PMF)&FGPropagate::GetInertialPosition);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/eci-z-ft", this, eZ, (PMF)&FGPropagate::GetInertialPosition);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/ecef-x-ft", this, eX, (PMF)&FGPropagate::GetLocation);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/ecef-y-ft", this, eY, (PMF)&FGPropagate::GetLocation);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/ecef-z-ft", this, eZ, (PMF)&FGPropagate::GetLocation);
src\models\FGPropagate.cpp:  PropertyManager->Tie("position/epa-rad", this, &FGPropagate::GetEarthPositionAngle);
src\models\FGPropagate.cpp:  PropertyManager->Tie("metrics/terrain-radius", this, &FGPropagate::GetLocalTerrainRadius);
src\models\FGPropagate.cpp:  PropertyManager->Tie("attitude/phi-rad", this, (int)ePhi, (PMF)&FGPropagate::GetEuler);
src\models\FGPropagate.cpp:  PropertyManager->Tie("attitude/theta-rad", this, (int)eTht, (PMF)&FGPropagate::GetEuler);
src\models\FGPropagate.cpp:  PropertyManager->Tie("attitude/psi-rad", this, (int)ePsi, (PMF)&FGPropagate::GetEuler);
src\models\FGPropagate.cpp:  PropertyManager->Tie("attitude/phi-deg", this, (int)ePhi, (PMF)&FGPropagate::GetEulerDeg);
src\models\FGPropagate.cpp:  PropertyManager->Tie("attitude/theta-deg", this, (int)eTht, (PMF)&FGPropagate::GetEulerDeg);
src\models\FGPropagate.cpp:  PropertyManager->Tie("attitude/psi-deg", this, (int)ePsi, (PMF)&FGPropagate::GetEulerDeg);
src\models\FGPropagate.cpp:  PropertyManager->Tie("attitude/roll-rad", this, (int)ePhi, (PMF)&FGPropagate::GetEuler);
src\models\FGPropagate.cpp:  PropertyManager->Tie("attitude/pitch-rad", this, (int)eTht, (PMF)&FGPropagate::GetEuler);
src\models\FGPropagate.cpp:  PropertyManager->Tie("attitude/heading-true-rad", this, (int)ePsi, (PMF)&FGPropagate::GetEuler);
src\models\FGPropagate.cpp:  PropertyManager->Tie("simulation/integrator/rate/rotational", (int*)&integrator_rotational_rate);
src\models\FGPropagate.cpp:  PropertyManager->Tie("simulation/integrator/rate/translational", (int*)&integrator_translational_rate);
src\models\FGPropagate.cpp:  PropertyManager->Tie("simulation/integrator/position/rotational", (int*)&integrator_rotational_position);
src\models\FGPropagate.cpp:  PropertyManager->Tie("simulation/integrator/position/translational", (int*)&integrator_translational_position);
src\models\FGPropagate.cpp:  PropertyManager->Tie("simulation/write-state-file", this, (iPMF)0, &FGPropagate::WriteStateFile);
src\models\FGPropulsion.cpp:  PropertyManager->Tie("propulsion/set-running", this, (iPMF)0, &FGPropulsion::InitRunning, false);
src\models\FGPropulsion.cpp:    PropertyManager->Tie("propulsion/starter_cmd", this, &FGPropulsion::GetStarter, &FGPropulsion::SetStarter);
src\models\FGPropulsion.cpp:    PropertyManager->Tie("propulsion/cutoff_cmd", this,  &FGPropulsion::GetCutoff, &FGPropulsion::SetCutoff);
src\models\FGPropulsion.cpp:    PropertyManager->Tie("propulsion/starter_cmd", this, &FGPropulsion::GetStarter, &FGPropulsion::SetStarter);
src\models\FGPropulsion.cpp:    PropertyManager->Tie("propulsion/magneto_cmd", this, (iPMF)0, &FGPropulsion::SetMagnetos, false);
src\models\FGPropulsion.cpp:  PropertyManager->Tie("propulsion/active_engine", this, (iPMF)&FGPropulsion::GetActiveEngine,
src\models\FGPropulsion.cpp:  PropertyManager->Tie("forces/fbx-prop-lbs", this, eX, (PMF)&FGPropulsion::GetForces);
src\models\FGPropulsion.cpp:  PropertyManager->Tie("forces/fby-prop-lbs", this, eY, (PMF)&FGPropulsion::GetForces);
src\models\FGPropulsion.cpp:  PropertyManager->Tie("forces/fbz-prop-lbs", this, eZ, (PMF)&FGPropulsion::GetForces);
src\models\FGPropulsion.cpp:  PropertyManager->Tie("moments/l-prop-lbsft", this, eX, (PMF)&FGPropulsion::GetMoments);
src\models\FGPropulsion.cpp:  PropertyManager->Tie("moments/m-prop-lbsft", this, eY, (PMF)&FGPropulsion::GetMoments);
src\models\FGPropulsion.cpp:  PropertyManager->Tie("moments/n-prop-lbsft", this, eZ, (PMF)&FGPropulsion::GetMoments);
src\models\FGSurface.cpp:  _PropertyManager->Tie( property_name.c_str(), &isSolid);
src\models\FGSurface.cpp:  _PropertyManager->Tie( property_name.c_str(), &bumpiness);
src\models\FGSurface.cpp:  _PropertyManager->Tie( property_name.c_str(), &maximumForce);
src\models\FGSurface.cpp:  _PropertyManager->Tie( property_name.c_str(), &rollingFFactor);
src\models\FGSurface.cpp:  _PropertyManager->Tie( property_name.c_str(), &staticFFactor);
src\models\FGBuoyantForces.cpp:  PropertyManager->Tie("moments/l-buoyancy-lbsft", this, eL,
src\models\FGBuoyantForces.cpp:  PropertyManager->Tie("moments/m-buoyancy-lbsft", this, eM,
src\models\FGBuoyantForces.cpp:  PropertyManager->Tie("moments/n-buoyancy-lbsft", this, eN,
src\models\FGBuoyantForces.cpp:  PropertyManager->Tie("forces/fbx-buoyancy-lbs", this, eX,
src\models\FGBuoyantForces.cpp:  PropertyManager->Tie("forces/fby-buoyancy-lbs", this, eY,
src\models\FGBuoyantForces.cpp:  PropertyManager->Tie("forces/fbz-buoyancy-lbs", this, eZ,
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &HP);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &StaticFriction_HP);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &ISFC);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &StarterGain);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &volumetric_efficiency);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &MAP);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &ManifoldPressure_inHg);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &Z_airbox);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &Ram_Air_Factor);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &Cooling_Factor);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, &BoostSpeed);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, this, &FGPiston::getCylinderHeadTemp_degF);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, this, &FGPiston::getOilTemp_degF);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, this, &FGPiston::getOilPressure_psi);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, this, &FGPiston::getExhaustGasTemp_degF);
src\models\propulsion\FGPiston.cpp:    PropertyManager->Tie(property_name, &BoostLossFactor);
src\models\propulsion\FGPiston.cpp:    PropertyManager->Tie(property_name, &BoostLossHP);
src\models\propulsion\FGPiston.cpp:  PropertyManager->Tie(property_name, this, &FGPiston::getAFR);
src\models\propulsion\FGRocket.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRocket::GetTotalImpulse);
src\models\propulsion\FGRocket.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRocket::GetVacTotalImpulse);
src\models\propulsion\FGRocket.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRocket::GetVacThrust);
src\models\propulsion\FGRocket.cpp:    PropertyManager->Tie( property_name.c_str(), this, &FGRocket::GetThrustVariation,
src\models\propulsion\FGRocket.cpp:    PropertyManager->Tie( property_name.c_str(), this, &FGRocket::GetTotalIspVariation,
src\models\propulsion\FGRocket.cpp:    PropertyManager->Tie( property_name.c_str(), this, &FGRocket::GetOxiFlowRate);
src\models\propulsion\FGRocket.cpp:    PropertyManager->Tie( property_name.c_str(), this, &FGRocket::GetMixtureRatio,
src\models\propulsion\FGRocket.cpp:    PropertyManager->Tie( property_name.c_str(), this, &FGRocket::GetIsp,
src\models\propulsion\FGTurboProp.cpp:  PropertyManager->Tie( property_name.c_str(), &N1);
src\models\propulsion\FGTurboProp.cpp:  PropertyManager->Tie( property_name.c_str(), &Reversed);
src\models\propulsion\FGTurboProp.cpp:  PropertyManager->Tie( property_name.c_str(), &HP);
src\models\propulsion\FGTurboProp.cpp:  PropertyManager->Tie( property_name.c_str(), &Eng_ITT_degC);
src\models\propulsion\FGTurboProp.cpp:  PropertyManager->Tie( property_name.c_str(), &Eng_Temperature);
src\models\propulsion\FGTurboProp.cpp:  PropertyManager->Tie( property_name.c_str(), &Ielu_intervent);
src\models\propulsion\FGTurboProp.cpp:  PropertyManager->Tie( property_name.c_str(), &CombustionEfficiency);
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTank*)this, &FGTank::GetContents,
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTank*)this, &FGTank::GetUnusableVolume,
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTank*)this, &FGTank::GetPctFull);
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTank*)this, &FGTank::GetDensity);
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTank*)this, &FGTank::GetPriority,
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTank*)this, &FGTank::GetExternalFlow,
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTank*)this, &FGTank::GetIxx);
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTank*)this, &FGTank::GetIyy);
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTank*)this, &FGTank::GetIzz);
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie(property_name.c_str(), (FGTank*)this, &FGTank::GetLocationX, &FGTank::SetLocationX);
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie(property_name.c_str(), (FGTank*)this, &FGTank::GetLocationY, &FGTank::SetLocationY);
src\models\propulsion\FGTank.cpp:  PropertyManager->Tie(property_name.c_str(), (FGTank*)this, &FGTank::GetLocationZ, &FGTank::SetLocationZ);
src\models\flight_control\FGSensor.cpp:  PropertyManager->Tie( tmp_low, this, &FGSensor::GetFailLow, &FGSensor::SetFailLow);
src\models\flight_control\FGSensor.cpp:  PropertyManager->Tie( tmp_high, this, &FGSensor::GetFailHigh, &FGSensor::SetFailHigh);
src\models\flight_control\FGSensor.cpp:  PropertyManager->Tie( tmp_stuck, this, &FGSensor::GetFailStuck, &FGSensor::SetFailStuck);
src\models\flight_control\FGSensor.cpp:        PropertyManager->Tie(qprop, this, &FGSensor::GetQuantized);
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), &N1);
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), &N2);
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTurbine*)this, 
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), &Seized);
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), &Stalled);
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTurbine*)this, &FGTurbine::GetBleedDemand, &FGTurbine::SetBleedDemand);
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTurbine*)this,
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTurbine*)this,
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTurbine*)this,
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTurbine*)this,
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTurbine*)this,
src\models\propulsion\FGTurbine.cpp:  PropertyManager->Tie( property_name.c_str(), (FGTurbine*)this,
src\models\propulsion\FGTransmission.cpp:  PropertyManager->Tie( property_name.c_str(), this, 
src\models\propulsion\FGTransmission.cpp:  PropertyManager->Tie( property_name.c_str(), this, 
src\models\propulsion\FGTransmission.cpp:  PropertyManager->Tie( property_name.c_str(), this, 
src\models\propulsion\FGThruster.cpp:    PropertyManager->Tie( property_name.c_str(), (FGForce *)this, &FGForce::GetPitch, &FGForce::SetPitch);
src\models\propulsion\FGThruster.cpp:    PropertyManager->Tie( property_name.c_str(), (FGForce *)this, &FGForce::GetYaw, &FGForce::SetYaw);
src\models\propulsion\FGThruster.cpp:        PropertyManager->Tie( property_name.c_str(), (FGThruster *)this, &FGThruster::GetReverserAngle,
src\models\flight_control\FGPID.cpp:  PropertyManager->Tie(tmp+"/initial-integrator-value", this, (PMF)nullptr,
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetRPM );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetEngineRPM );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetA0 );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetA1 );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetB1 );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetLambda );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetMu );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetNu );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetVi );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetCT );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetTorque );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetThetaDW );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetPhiDW );
src\models\propulsion\FGRotor.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetGroundEffectScaleNorm,
src\models\propulsion\FGRotor.cpp:      PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetCollectiveCtrl, &FGRotor::SetCollectiveCtrl);
src\models\propulsion\FGRotor.cpp:      PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetCollectiveCtrl, &FGRotor::SetCollectiveCtrl);
src\models\propulsion\FGRotor.cpp:      PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetLateralCtrl, &FGRotor::SetLateralCtrl);
src\models\propulsion\FGRotor.cpp:      PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetLongitudinalCtrl, &FGRotor::SetLongitudinalCtrl);
src\models\propulsion\FGRotor.cpp:      PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetCollectiveCtrl, &FGRotor::SetCollectiveCtrl);
src\models\propulsion\FGRotor.cpp:      PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetLateralCtrl, &FGRotor::SetLateralCtrl);
src\models\propulsion\FGRotor.cpp:      PropertyManager->Tie( property_name.c_str(), this, &FGRotor::GetLongitudinalCtrl, &FGRotor::SetLongitudinalCtrl);
src\models\propulsion\FGPropeller.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGPropeller::GetEngineRPM );
src\models\propulsion\FGPropeller.cpp:  PropertyManager->Tie( property_name.c_str(), &J );
src\models\propulsion\FGPropeller.cpp:  PropertyManager->Tie( property_name.c_str(), &Pitch );
src\models\propulsion\FGPropeller.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGPropeller::GetThrustCoefficient );
src\models\propulsion\FGPropeller.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGPropeller::GetRPM );
src\models\propulsion\FGPropeller.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGPropeller::GetHelicalTipMach );
src\models\propulsion\FGPropeller.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGPropeller::GetConstantSpeed,
src\models\propulsion\FGPropeller.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGPropeller::GetInducedVelocity,
src\models\flight_control\FGActuator.cpp:  PropertyManager->Tie( tmp_zero, this, &FGActuator::GetFailZero, &FGActuator::SetFailZero);
src\models\flight_control\FGActuator.cpp:  PropertyManager->Tie( tmp_hardover, this, &FGActuator::GetFailHardover, &FGActuator::SetFailHardover);
src\models\flight_control\FGActuator.cpp:  PropertyManager->Tie( tmp_stuck, this, &FGActuator::GetFailStuck, &FGActuator::SetFailStuck);
src\models\flight_control\FGActuator.cpp:  PropertyManager->Tie( tmp_sat, this, &FGActuator::IsSaturated);
src\models\propulsion\FGEngine.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGEngine::GetRunning, &FGEngine::SetRunning );
src\models\propulsion\FGEngine.cpp:  PropertyManager->Tie( property_name.c_str(), Thruster, &FGThruster::GetThrust);
src\models\propulsion\FGEngine.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGEngine::GetFuelFlowRate);
src\models\propulsion\FGEngine.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGEngine::GetFuelFlowRateGPH);
src\models\propulsion\FGEngine.cpp:  PropertyManager->Tie( property_name.c_str(), this, &FGEngine::GetFuelUsedLbs);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("propulsion/tat-r", this, &FGAuxiliary::GetTotalTemperature);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("propulsion/tat-c", this, &FGAuxiliary::GetTAT_C);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("propulsion/pt-lbs_sqft", this, &FGAuxiliary::GetTotalPressure);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/vc-fps", this, &FGAuxiliary::GetVcalibratedFPS);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/vc-kts", this, &FGAuxiliary::GetVcalibratedKTS);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/ve-fps", this, &FGAuxiliary::GetVequivalentFPS);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/ve-kts", this, &FGAuxiliary::GetVequivalentKTS);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/vtrue-fps", this, &FGAuxiliary::GetVtrueFPS);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/vtrue-kts", this, &FGAuxiliary::GetVtrueKTS);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/machU", this, &FGAuxiliary::GetMachU);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/p-aero-rad_sec", this, eX, (PMF)&FGAuxiliary::GetAeroPQR);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/q-aero-rad_sec", this, eY, (PMF)&FGAuxiliary::GetAeroPQR);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/r-aero-rad_sec", this, eZ, (PMF)&FGAuxiliary::GetAeroPQR);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/phidot-rad_sec", this, ePhi, (PMF)&FGAuxiliary::GetEulerRates);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/thetadot-rad_sec", this, eTht, (PMF)&FGAuxiliary::GetEulerRates);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/psidot-rad_sec", this, ePsi, (PMF)&FGAuxiliary::GetEulerRates);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/u-aero-fps", this, eU, (PMF)&FGAuxiliary::GetAeroUVW);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/v-aero-fps", this, eV, (PMF)&FGAuxiliary::GetAeroUVW);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/w-aero-fps", this, eW, (PMF)&FGAuxiliary::GetAeroUVW);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/vt-fps", this, &FGAuxiliary::GetVt);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/mach", this, &FGAuxiliary::GetMach);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("velocities/vg-fps", this, &FGAuxiliary::GetVground);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("accelerations/a-pilot-x-ft_sec2", this, eX, (PMF)&FGAuxiliary::GetPilotAccel);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("accelerations/a-pilot-y-ft_sec2", this, eY, (PMF)&FGAuxiliary::GetPilotAccel);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("accelerations/a-pilot-z-ft_sec2", this, eZ, (PMF)&FGAuxiliary::GetPilotAccel);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("accelerations/n-pilot-x-norm", this, eX, (PMF)&FGAuxiliary::GetNpilot);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("accelerations/n-pilot-y-norm", this, eY, (PMF)&FGAuxiliary::GetNpilot);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("accelerations/n-pilot-z-norm", this, eZ, (PMF)&FGAuxiliary::GetNpilot);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("accelerations/Nx", this, &FGAuxiliary::GetNx);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("accelerations/Ny", this, &FGAuxiliary::GetNy);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("accelerations/Nz", this, &FGAuxiliary::GetNz);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("forces/load-factor", this, &FGAuxiliary::GetNlf);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/alpha-rad", this, (PF)&FGAuxiliary::Getalpha);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/beta-rad", this, (PF)&FGAuxiliary::Getbeta);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/mag-beta-rad", this, (PF)&FGAuxiliary::GetMagBeta);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/alpha-deg", this, inDegrees, (PMF)&FGAuxiliary::Getalpha);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/beta-deg", this, inDegrees, (PMF)&FGAuxiliary::Getbeta);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/mag-beta-deg", this, inDegrees, (PMF)&FGAuxiliary::GetMagBeta);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/Re", this, &FGAuxiliary::GetReynoldsNumber);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/qbar-psf", this, &FGAuxiliary::Getqbar);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/qbarUW-psf", this, &FGAuxiliary::GetqbarUW);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/qbarUV-psf", this, &FGAuxiliary::GetqbarUV);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/alphadot-rad_sec", this, (PF)&FGAuxiliary::Getadot);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/betadot-rad_sec", this, (PF)&FGAuxiliary::Getbdot);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/alphadot-deg_sec", this, inDegrees, (PMF)&FGAuxiliary::Getadot);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/betadot-deg_sec", this, inDegrees, (PMF)&FGAuxiliary::Getbdot);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/h_b-cg-ft", this, &FGAuxiliary::GetHOverBCG);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("aero/h_b-mac-ft", this, &FGAuxiliary::GetHOverBMAC);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("flight-path/gamma-rad", this, &FGAuxiliary::GetGamma);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("flight-path/gamma-deg", this, inDegrees, (PMF)&FGAuxiliary::GetGamma);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("flight-path/psi-gt-rad", this, &FGAuxiliary::GetGroundTrack);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("position/distance-from-start-lon-mt", this, &FGAuxiliary::GetLongitudeRelativePosition);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("position/distance-from-start-lat-mt", this, &FGAuxiliary::GetLatitudeRelativePosition);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("position/distance-from-start-mag-mt", this, &FGAuxiliary::GetDistanceRelativePosition);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("position/vrp-gc-latitude_deg", &vLocationVRP, &FGLocation::GetLatitudeDeg);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("position/vrp-longitude_deg", &vLocationVRP, &FGLocation::GetLongitudeDeg);
src\models\FGAuxiliary.cpp:  PropertyManager->Tie("position/vrp-radius-ft", &vLocationVRP, &FGLocation::GetRadius);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/T-R", this, &FGAtmosphere::GetTemperature);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/rho-slugs_ft3", this, &FGAtmosphere::GetDensity);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/P-psf", this, &FGAtmosphere::GetPressure);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/a-fps", this, &FGAtmosphere::GetSoundSpeed);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/T-sl-R", this, &FGAtmosphere::GetTemperatureSL);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/rho-sl-slugs_ft3", this, &FGAtmosphere::GetDensitySL);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/a-sl-fps", this, &FGAtmosphere::GetSoundSpeedSL);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/theta", this, &FGAtmosphere::GetTemperatureRatio);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/sigma", this, &FGAtmosphere::GetDensityRatio);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/delta", this, &FGAtmosphere::GetPressureRatio);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/a-ratio", this, &FGAtmosphere::GetSoundSpeedRatio);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/density-altitude", this, &FGAtmosphere::GetDensityAltitude);
src\models\FGAtmosphere.cpp:  PropertyManager->Tie("atmosphere/pressure-altitude", this, &FGAtmosphere::GetPressureAltitude);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/Sw-sqft", this, &FGAircraft::GetWingArea, &FGAircraft::SetWingArea);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/bw-ft", this, &FGAircraft::GetWingSpan);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/cbarw-ft", this, &FGAircraft::Getcbar);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/iw-rad", this, &FGAircraft::GetWingIncidence);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/iw-deg", this, &FGAircraft::GetWingIncidenceDeg);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/Sh-sqft", this, &FGAircraft::GetHTailArea);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/lh-ft", this, &FGAircraft::GetHTailArm);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/Sv-sqft", this, &FGAircraft::GetVTailArea);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/lv-ft", this, &FGAircraft::GetVTailArm);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/lh-norm", this, &FGAircraft::Getlbarh);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/lv-norm", this, &FGAircraft::Getlbarv);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/vbarh-norm", this, &FGAircraft::Getvbarh);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/vbarv-norm", this, &FGAircraft::Getvbarv);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/aero-rp-x-in", this, eX, (PMF)&FGAircraft::GetXYZrp, &FGAircraft::SetXYZrp);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/aero-rp-y-in", this, eY, (PMF)&FGAircraft::GetXYZrp, &FGAircraft::SetXYZrp);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/aero-rp-z-in", this, eZ, (PMF)&FGAircraft::GetXYZrp, &FGAircraft::SetXYZrp);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/eyepoint-x-in", this, eX, (PMF)&FGAircraft::GetXYZep);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/eyepoint-y-in", this, eY,(PMF)&FGAircraft::GetXYZep);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/eyepoint-z-in", this, eZ, (PMF)&FGAircraft::GetXYZep);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/visualrefpoint-x-in", this, eX, (PMF)&FGAircraft::GetXYZvrp);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/visualrefpoint-y-in", this, eY, (PMF)&FGAircraft::GetXYZvrp);
src\models\FGAircraft.cpp:  PropertyManager->Tie("metrics/visualrefpoint-z-in", this, eZ, (PMF)&FGAircraft::GetXYZvrp);
src\math\FGFunction.cpp:      PropertyManager->Tie(nName, this, &aFunc<func_t, Nmin>::GetValue);
src\math\FGFunction.cpp:    PropertyManager->Tie(nName, this, &FGFunction::GetValue);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/fbx-aero-lbs",  this, eX, (PMF)&FGAerodynamics::GetForces);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/fby-aero-lbs",  this, eY, (PMF)&FGAerodynamics::GetForces);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/fbz-aero-lbs",  this, eZ, (PMF)&FGAerodynamics::GetForces);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("moments/l-aero-lbsft", this, eL, (PMF)&FGAerodynamics::GetMoments);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("moments/m-aero-lbsft", this, eM, (PMF)&FGAerodynamics::GetMoments);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("moments/n-aero-lbsft", this, eN, (PMF)&FGAerodynamics::GetMoments);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/fwx-aero-lbs",  this, eDrag, (PMF)&FGAerodynamics::GetvFw);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/fwy-aero-lbs",  this, eSide, (PMF)&FGAerodynamics::GetvFw);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/fwz-aero-lbs",  this, eLift, (PMF)&FGAerodynamics::GetvFw);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/fsx-aero-lbs",  this, eX, (PMF)&FGAerodynamics::GetForcesInStabilityAxes);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/fsy-aero-lbs",  this, eY, (PMF)&FGAerodynamics::GetForcesInStabilityAxes);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/fsz-aero-lbs",  this, eZ, (PMF)&FGAerodynamics::GetForcesInStabilityAxes);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("moments/roll-stab-aero-lbsft", this, eRoll, (PMF)&FGAerodynamics::GetMomentsInStabilityAxes);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("moments/pitch-stab-aero-lbsft", this, ePitch, (PMF)&FGAerodynamics::GetMomentsInStabilityAxes);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("moments/yaw-stab-aero-lbsft", this, eYaw, (PMF)&FGAerodynamics::GetMomentsInStabilityAxes);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("moments/roll-wind-aero-lbsft", this, eRoll, (PMF)&FGAerodynamics::GetMomentsInWindAxes);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("moments/pitch-wind-aero-lbsft", this, ePitch, (PMF)&FGAerodynamics::GetMomentsInWindAxes);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("moments/yaw-wind-aero-lbsft", this, eYaw, (PMF)&FGAerodynamics::GetMomentsInWindAxes);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("forces/lod-norm",      this, &FGAerodynamics::GetLoD);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("aero/cl-squared",      this, &FGAerodynamics::GetClSquared);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("aero/qbar-area", &qbar_area);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("aero/alpha-max-rad",   this, &FGAerodynamics::GetAlphaCLMax, &FGAerodynamics::SetAlphaCLMax, true);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("aero/alpha-min-rad",   this, &FGAerodynamics::GetAlphaCLMin, &FGAerodynamics::SetAlphaCLMin, true);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("aero/bi2vel",          this, &FGAerodynamics::GetBI2Vel);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("aero/ci2vel",          this, &FGAerodynamics::GetCI2Vel);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("aero/alpha-wing-rad",  this, &FGAerodynamics::GetAlphaW);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("systems/stall-warn-norm", this, &FGAerodynamics::GetStallWarn);
src\models\FGAerodynamics.cpp:  PropertyManager->Tie("aero/stall-hyst-norm", this, &FGAerodynamics::GetHysteresisParm);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("accelerations/pdot-rad_sec2", this, eP, (PMF)&FGAccelerations::GetPQRdot);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("accelerations/qdot-rad_sec2", this, eQ, (PMF)&FGAccelerations::GetPQRdot);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("accelerations/rdot-rad_sec2", this, eR, (PMF)&FGAccelerations::GetPQRdot);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("accelerations/udot-ft_sec2", this, eU, (PMF)&FGAccelerations::GetUVWdot);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("accelerations/vdot-ft_sec2", this, eV, (PMF)&FGAccelerations::GetUVWdot);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("accelerations/wdot-ft_sec2", this, eW, (PMF)&FGAccelerations::GetUVWdot);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("accelerations/gravity-ft_sec2", this, &FGAccelerations::GetGravAccelMagnitude);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("simulation/gravitational-torque", &gravTorque);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("forces/fbx-weight-lbs", this, eX, (PMF)&FGAccelerations::GetWeight);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("forces/fby-weight-lbs", this, eY, (PMF)&FGAccelerations::GetWeight);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("forces/fbz-weight-lbs", this, eZ, (PMF)&FGAccelerations::GetWeight);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("forces/fbx-total-lbs", this, eX, (PMF)&FGAccelerations::GetForces);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("forces/fby-total-lbs", this, eY, (PMF)&FGAccelerations::GetForces);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("forces/fbz-total-lbs", this, eZ, (PMF)&FGAccelerations::GetForces);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("moments/l-total-lbsft", this, eL, (PMF)&FGAccelerations::GetMoments);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("moments/m-total-lbsft", this, eM, (PMF)&FGAccelerations::GetMoments);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("moments/n-total-lbsft", this, eN, (PMF)&FGAccelerations::GetMoments);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("moments/l-gear-lbsft", this, eL, (PMF)&FGAccelerations::GetGroundMoments);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("moments/m-gear-lbsft", this, eM, (PMF)&FGAccelerations::GetGroundMoments);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("moments/n-gear-lbsft", this, eN, (PMF)&FGAccelerations::GetGroundMoments);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("forces/fbx-gear-lbs", this, eX, (PMF)&FGAccelerations::GetGroundForces);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("forces/fby-gear-lbs", this, eY, (PMF)&FGAccelerations::GetGroundForces);
src\models\FGAccelerations.cpp:  PropertyManager->Tie("forces/fbz-gear-lbs", this, eZ, (PMF)&FGAccelerations::GetGroundForces);
